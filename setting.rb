class Setting < Struct.new(:api_key, :api_secret, :token_key, :token_secret ,
:server,
:size,
:model,
:time,
:exposure_time,
:white_balance,
:f_number,
:ISO,
:GPS,
:focal_length)
	VERSION = 2.0
	OLD_KEYS = %W(APIKEY APISECRET TOKENKEY TOKENSECRET)
	attr_reader :filename

	def initialize(autoload = true)
		@filename = ENV["SETTING_FILE"] || "setting.db"
		return unless autoload
		wizard unless File.exists? @filename
		self.read
		wizard unless self.check?
	end

	# Modify setting in an intaractive way.
	def wizard
		puts "Please entry below informations,"
		print "API key [#{self.api_key}]: "
		value = gets.chomp
		self.api_key = value unless value.empty?

		print "API sercet key [#{self.api_secret}]: "
		value = gets.chomp
		self.api_secret = value unless value.empty?

		print "Token key [#{self.token_key}]: "
		value = gets.chomp
		self.token_key = value unless value.empty?

		print "Token secret key [#{self.token_secret}]: "
		value = gets.chomp
		self.token_secret = value unless value.empty?
	
		print "Want to open the server?(y/n)[#{self.server}]: "
                value = gets.chomp
                self.server = tr(value)
			
		print "Want to show picture's size?(y/n)[#{self.size}]: "
		value = gets.chomp
		self.size = tr(value) 
	
		print "Want to show picture's model?(y/n)[#{self.model}]: "
		value = gets.chomp
		self.model = tr(value)
		
		print "Want to show picture's time and date?(y/n)[#{self.time}]: "
		value = gets.chomp
		self.time = tr(value)
		
		print "Want to show picture's exposure time?(y/n)[#{self.exposure_time}]: "
		value = gets.chomp
		self.exposure_time = tr(value)
		
		print "Want to show picture's white balance?(y/n)[#{self.white_balance}]: "
		value = gets.chomp
		self.white_balance = tr(value)
		
		print "Want to show picture's f number?(y/n)[#{self.f_number}]: "
		value = gets.chomp
		self.f_number = tr(value)
		
		print "Want to show picture's focal length?(y/n)[#{self.focal_length}]: "
		value = gets.chomp
		self.focal_length = tr(value)
		
		print "Want to show picture's ISO?(y/n)[#{self.ISO}]: "
		value = gets.chomp
		self.ISO = tr(value)
		
		print "Want to show picture's GPS data?(y/n)[#{self.GPS}]: "
		value = gets.chomp
		self.GPS = tr(value)
		
		self.write!
		puts self.to_s
	end

	REGEXP_SETTING_PAIR = /^(?<key>\w+)\s*=\s*(?<bracket>'|")(?<value>[[:word:]]*)\k<bracket>$/
	def read
		puts "Read setting..."
		IO.readlines(@filename).each do |line|
			REGEXP_SETTING_PAIR.match line.chomp do |md|
				key = md[:key].to_sym
				value = md[:value]
				self[key] = value if self.members.include? key
				puts "WARNING! Found old option: #{md[:key]}. You may run setting_upgrade.rb before starting ke__ri robot." if OLD_KEYS.include? md[:key]
			end																																																																
		end
		puts "done"
	end

	def write!
		File.open @filename, "w" do |io|
			io.puts %(# Notice! Do NOT add option which is not effective. They will be cleared with next wizard.)
			io.puts %(# Generated by v#{VERSION}.)
			self.members.each do |key|
				io.puts %(#{key} = "#{self[key]}")
			end
		end
	end

	def check?
		self.members.each do |key|
			next unless self[key].nil? or self[key].empty?
			puts %(Missing necessary key: #{key})
			return false
		end
		true
	end
	
	def set(key,value)
		begin
			self[key] = value
			log %(#{Time.now.to_s} [EVENT] The setting #{key} has change value = #{self[key]}) 
		rescue
			log %(#{Time.now.to_s} [ERROR] Set the setting value has error: #{$!.to_s})
		end
	end
	
	def list
		 self.members.each do |key|
                 	puts %(#{key} = "#{self[key]}")
                 end
	end
	
	def to_s
		result = "{\n"
		self.members.each do |key|
			result << %(\t#{key} => #{self[key]}\n)
		end
		result << "}"
	end
	
	def tr(t)
		if t =~ /[nN][oO]?/
			return false
		else
			return true
		end
	end
end
